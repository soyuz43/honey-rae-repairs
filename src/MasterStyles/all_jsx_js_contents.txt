```
import React from "react"
import ReactDOM from "react-dom/client"
import { App } from "./App.jsx"
import "./index.css"

const container = document.getElementById("root")
const root = ReactDOM.createRoot(container)
root.render(<App />)
```
```
// src/App.jsx
import { useEffect, useState } from "react";
import "./styles/App.css";
import { TicketList } from "./components/TicketList";
import { CustomerList } from "./components/CustomerList"; // Import the CustomerList component

export const App = () => {
  return (
    <>
      <TicketList />   
      <CustomerList /> 
    </>
  );
};
```
```
// src/components/ticketServices.jsx
export const getAllTickets = () => {
    
    return fetch(`http://localhost:8088/serviceTickets?_embed=employeeTickets`).then(res => res.json());
}
```
```
// src/services.jsx
export const getNonStaffUsers = () => {
    return fetch('http://localhost:8088/users?isStaff=false').then((res) => 
    res.json()
)
}```
```
// src/services/employeeServices.jsx
export const getAllEmployees = () => {
    return fetch("http://localhost:8088/employees?_expand=user").then((res) =>
      res.json()
    );
  };
  ```
```
import React, { useState, useEffect } from "react";
import "./componentStyles/TicketList.css";
import { Ticket } from "./Ticket.jsx";
import { getAllTickets } from "../services/ticketService.jsx";
import { getAllEmployees } from "../services/employeeServices.jsx";
import { TicketFilterBar } from "./TicketFilterBar";

export const TicketList = () => {
    const [allTickets, setAllTickets] = useState([]);
    const [allEmployees, setAllEmployees] = useState([]);
    const [showEmergencyOnly, setShowEmergencyOnly] = useState(false);
    const [filteredTickets, setFilteredTickets] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");

    useEffect(() => {
        getAllTickets().then((ticketsArray) => {
            setAllTickets(ticketsArray);
        });
        getAllEmployees().then((employeesArray) => {
            setAllEmployees(employeesArray);
        });
    }, []);

    useEffect(() => {
        let tickets = allTickets;
        if (showEmergencyOnly) {
            tickets = tickets.filter(ticket => ticket.emergency === true);
        }
        if (searchTerm) {
            tickets = tickets.filter(ticket => {    // * search now by ticket # and/or employee name!
                const ticketDescMatch = ticket.description.toLowerCase().includes(searchTerm.toLowerCase());
                const employee = allEmployees.find(emp => emp.id === ticket.employeeTickets[0]?.employeeId);
                const employeeNameMatch = employee ? employee.user.fullName.toLowerCase().includes(searchTerm.toLowerCase()) : false;
                const ticketIdMatch = ticket.id.toString().includes(searchTerm);  
                return ticketDescMatch || employeeNameMatch || ticketIdMatch;
            });
        }
        setFilteredTickets(tickets);
    }, [showEmergencyOnly, allTickets, allEmployees, searchTerm]);
    return (
        <div className="tickets-container">
            <h2>Tickets</h2>
            <div className="filter-bar">
                <button 
                    className={`filter-btn ${showEmergencyOnly ? 'btn-info' : 'btn-primary'}`} 
                    onClick={() => setShowEmergencyOnly(!showEmergencyOnly)}>
                    {showEmergencyOnly ? 'Show All' : 'Emergency'}
                </button>
                <TicketFilterBar setSearchTerm={setSearchTerm} />
            </div>
            <article className="tickets">
                {filteredTickets.map(ticket => (
                    <Ticket key={ticket.id} ticket={ticket} />
                ))}
            </article>
        </div>
    );
};
```
```
// src/components/Ticket.jsx

import { useEffect, useState } from "react";
import { getAllEmployees } from "../services/employeeServices";


export const Ticket = ({ticket}) => {
  const [employees, setEmployees] = useState([])
  const [assignedEmployee, setAssignedEmployee] = useState({})

  useEffect(() =>{
    getAllEmployees().then((employeesArray) => {
      
        setEmployees(employeesArray)
    })
  }, [])

  useEffect(() => {
    const foundEmployee = employees.find(employee => employee.id === ticket.employeeTickets[0]?.employeeId
    )
    setAssignedEmployee(foundEmployee)
  }, [employees, ticket])

  return (
    <section key={ticket.id} className="ticket">
      <header className="ticket-info">#{ticket.id}</header>
      <div>{ticket.description}</div>
      <footer>
        <div> 
          <div className="ticket-info">assigned to</div>
          <div>{assignedEmployee ? assignedEmployee.user?.fullName : "None"}</div>
        </div>
        <div>
          <div className="ticket-info">emergency</div>
          <div>{ticket.emergency ? "yes" : "no"}</div>
        </div>
      </footer>
    </section>
  );
};
```
```
// src/components/CustomerList.jsx
import { useEffect, useState } from "react";
import "./componentStyles/CustomerList.css";
import { getNonStaffUsers } from "../services/userServices"; 



export const CustomerList = () => {
  const [customers, setCustomers] = useState([]);

  useEffect(() => {
    getNonStaffUsers().then((customerArray) => {
      setCustomers(customerArray);
    });
  }, []);

  return (
    <div className="customers">
      {customers.map((customerObj) => (
        <div key={customerObj.id}>
          <div className="customer-info">
            <div>Name:</div>
            <div>{customerObj.fullName}</div>
            <div>Email:</div>
            <div>{customerObj.email}</div>
          </div>
        </div>
      ))}
    </div>
  );
};
```
```
// src/components/TicketFilterBar.jsx
import React from 'react';

export const TicketFilterBar = ({ setSearchTerm }) => {
    return (
        <div className="filter-bar">
            <input
                type="text"
                className="ticket-search"
                placeholder="Search tickets"
                onChange={(e) => setSearchTerm(e.target.value)}  // Update search term on change
            />
        </div>
    );
};
```
---
Title: .
Description:
(Generate a brief description about the purpose and main functions of the project based on the provided source code.)

Contents:
- Table of Contents generated from modules and files mentioned in the code.

Installation:
1. (List installation steps if needed, including dependencies and library requirements)
2.
3.

Usage:
1. (Describe how to use the project based on the provided source code)
2.
3.

Contributing:
1. (Include guidelines for contributing to the project, such as submitting issues or pull requests)
2.

License: (Insert License Information Here)
Version: (Insert Project Version Here)
Date: 2024-04-13

Replace "(Generate a brief description about the purpose and main functions of the project based on the provided source code.)", "(List installation steps if needed, including dependencies and library requirements)", "(Describe how to use the project based on the provided source code)", "(Include guidelines for contributing to the project, such as submitting issues or pull requests)", "(Insert License Information Here)" and "(Insert Project Version Here)" with appropriate information relevant to your specific project. This prompt should guide the LLM in generating a readable and useful readme file based on the source code you've provided. In markdown.
---
